/*
 * -------------------------------------------------
 *  Predector Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

manifest {
    name = 'nanopore_assembly'
    author = 'Johannes Debler                                    '
    homePage = 'https://github.com/ccdmb/predector'
    description = 'A pipeline to assemble fungal pathogens from Kit 14 Nanopore reads.'
    mainScript = 'main.nf'
    nextflowVersion = '>=21'
    version = '1'
    defaultBranch = 'main'
}


// Global default params, used in configs
params {
    canuSlow = false
    outdir = "assembly"
    tracedir = "${params.outdir}/pipeline_info"
}


profiles {
    nimbus {
        includeConfig "${baseDir}/conf/nimbus.config"
    }
    zeus {
        includeConfig "${baseDir}/conf/zeus.config"
    }
    docker {
        includeConfig "${baseDir}/conf/containers.config"
        docker.enabled = true
    }
    docker_sudo {
        includeConfig "${baseDir}/conf/containers.config"
        docker.enabled = true
        docker.sudo = true
    }
    solo {
        includeConfig "${baseDir}/conf/solo.config"
    }
    singularity {
        includeConfig "${baseDir}/conf/containers.config"
        singularity.enabled = true
    }
}

// Avoid this error:
// WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
// Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351, once this is established and works well, nextflow might implement this behavior as new default.
docker.runOptions = '-u \$(id -u):\$(id -g)'
podman.runOptions = '-u \$(id -u):\$(id -g)'

// Mount the filesystem with singularity.
singularity.autoMounts = true

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']


timeline {
    enabled = true
    file = "${params.tracedir}/execution_timeline.html"
}
report {
    enabled = true
    file = "${params.tracedir}/execution_report.html"
}
trace {
    enabled = true
    trace.overwrite = true
    file = "${params.tracedir}/execution_trace.txt"
}
dag {
    file = "${params.tracedir}/pipeline_dag.svg"
}
